from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from django.contrib.auth import get_user_model
from .serializers import (
    UserSerializer,
    UserRegistrationSerializer,
    UserProfileSerializer
)

User = get_user_model()


class UserViewSet(viewsets.ModelViewSet):
    """
    ViewSet for user management
    - Registration (public)
    - Profile management (authenticated)
    - User listing (authenticated)
    """
    queryset = User.objects.all()
    serializer_class = UserSerializer
    lookup_field = 'id'

    def get_permissions(self):
        """
        Allow public access for registration, require auth for everything else
        """
        if self.action == 'create':
            permission_classes = [AllowAny]
        else:
            permission_classes = [IsAuthenticated]
        return [permission() for permission in permission_classes]

    def get_serializer_class(self):
        """Use different serializers for different actions"""
        if self.action == 'create':
            return UserRegistrationSerializer
        elif self.action == 'update_profile':
            return UserProfileSerializer
        elif self.action == 'me':
            return UserSerializer  # ‚Üê FIXED: Now returns full user data with is_superuser
        return UserSerializer

    def create(self, request, *args, **kwargs):
        """
        POST /api/auth/users/
        Register a new user
        """
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()

        # Return user data with 201 status
        user_serializer = UserSerializer(user)
        return Response(user_serializer.data, status=status.HTTP_201_CREATED)

    @action(detail=False, methods=['get'], permission_classes=[IsAuthenticated])
    def me(self, request):
        """
        GET /api/auth/users/me/
        Get current authenticated user's profile
        """
        serializer = self.get_serializer(request.user)
        return Response(serializer.data)

    @action(detail=False, methods=['patch'], permission_classes=[IsAuthenticated])
    def update_profile(self, request):
        """
        PATCH /api/auth/users/update_profile/
        Update current user's profile
        """
        serializer = self.get_serializer(
            request.user,
            data=request.data,
            partial=True
        )
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data)

    @action(detail=False, methods=['get'], permission_classes=[IsAuthenticated])
    def stats(self, request):
        """
        GET /api/auth/users/stats/
        Get current user's statistics
        """
        user = request.user

        stats = {
            'user_type': user.user_type,
            'is_verified': user.is_verified,
            'wallet_balance': str(user.wallet_balance),
            'trust_score': user.trust_score,
            'auctions_won': user.auctions_won,
            'auctions_participated': user.auctions_participated,
            'total_spent': str(user.total_spent),
        }

        # Add seller-specific stats
        if user.user_type == 'seller':
            stats['auctions_created'] = user.created_auctions.count()
            stats['active_auctions'] = user.created_auctions.filter(status='active').count()

        return Response(stats)
